function solution(n, m) {
  // 최대공약수 : 두 수의 공통되는 약수 중에서 제일 큰 수
  // 최소공배수 : 두 수의 공통되는 배수 중에서 제일 작은 수
  const biggest = Math.max(n, m);

  // 최대공약수 구하기
  let max = 0; // 공약수 중에서 제일 큰 수만 저장
  for (let i = 1; i <= biggest; i++) {
    if (n % i === 0 && m % i === 0) {
      max = i;
    }
  }

  // 최소공배수 구하기
  let min = 0; // 공배수 중에서 제일 작은 수만 저장
  for (let i = biggest; i <= n * m; i += biggest) {
    if (i % Math.min(n, m) === 0) {
      min = i;
      break;
    }
  }
  return [max, min];
}

/*
    
    function solution(n, m){

    // 유클리드 호제법
    // - 최대 공약수를 구하기 위한 알고리즘 공식

    // a를 b로 나눴을때 (a가 b보다 클 경우) === 큰 수에서 작은 수를 나눴을때
    // 나머지 값이 0이 되면, 작은 수 (b)가 최대 공약수가 된다.
    // 나머지 값이 0이 되지 않으면, 작은 수(b)는 큰 수(a)를 가져온다
    // 나머지 값이 0이 되지 않으면, 작은 수(b)가 큰 수(a)가 되고
    // 나머지 값이 작은 수(b)가 된다.
    // 반복했을 때에 나머지 값이 0이 나오면 작은 수(b)가 최대공약수가 된다.        

         let a = Math.max( n, m ); // 큰 수
        let b = Math.min( n, m ); // 작은 수
        let r = 0; // a를 b로 나눴을 때의 나머지 값

        while( (a % b) > 0 ) {
            r = a % b; // 큰 수에서 작은 수를 나눈 나머지 값을 저장
            a = b; // 큰 수는 나눴을 때의 작은 수를 가져온다.
            b = r; // 작은 수에는 나머지 값을 가져온다.            
        }

        // 최소 공배수는 두 수를 곱한 수에 최대 공약수를 나눠준 몫의 값
        eturn [ b, (n * m) / b ];
    }

*/
